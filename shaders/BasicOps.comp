#version 450
#extension GL_ARB_separate_shader_objects : enable

//layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer a { readonly  mediump float x[]; };
layout(set = 0, binding = 1) buffer b { readonly  mediump float y[]; };
layout(set = 0, binding = 2) buffer c { writeonly mediump float outData[]; };

layout(constant_id = 0) const uint batchNum   = 0;
layout(constant_id = 1) const uint maxBatches = 1;

layout(constant_id = 2) const uint xs1 = 1;
layout(constant_id = 3) const uint xs2 = 1;
layout(constant_id = 4) const uint xs3 = 1;
layout(constant_id = 5) const uint xs4 = 1;

layout(constant_id = 6) const uint ys1 = 1;
layout(constant_id = 7) const uint ys2 = 1;
layout(constant_id = 8) const uint ys3 = 1;
layout(constant_id = 9) const uint ys4 = 1;

#define OP_MUL        0
#define OP_ADD        1
#define OP_SUB        2
#define OP_DIV        3
#define OP_DIV_NO_NAN 4
layout(constant_id = 10) const uint op = 0;


const uint xTotalSize = xs2 * xs3 * xs4;

const uint yTotalSize = ys2 * ys3 * ys4;


uint unFlatToFlatX(uint b, uint x, uint y, uint z){
    return (xTotalSize * b) + (x * xs3 + y) * xs4 + z;
}

uint unFlatToFlatY(uint b, uint x, uint y, uint z){
    return (yTotalSize * b) + (x * ys3 + y) * ys4 + z;
}

//(batchNum, x, y, z)

void main(){

    uint outTotalSize = gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_NumWorkGroups.z;

    uint outIndex = (outTotalSize * batchNum) + (gl_GlobalInvocationID.x * gl_NumWorkGroups.y + gl_GlobalInvocationID.y) * gl_NumWorkGroups.z + gl_GlobalInvocationID.z;

    
    if(op == OP_MUL){
        outData[outIndex] = 
            x[unFlatToFlatX(xs1 > 1 ? batchNum : 0, 
                            xs2 > 1 ? gl_GlobalInvocationID.x : 0, 
                            xs3 > 1 ? gl_GlobalInvocationID.y : 0, 
                            xs4 > 1 ? gl_GlobalInvocationID.z : 0)]
            * 
            y[unFlatToFlatY(ys1 > 1 ? batchNum : 0, 
                            ys2 > 1 ? gl_GlobalInvocationID.x : 0, 
                            ys3 > 1 ? gl_GlobalInvocationID.y : 0, 
                            ys4 > 1 ? gl_GlobalInvocationID.z : 0)];
    }else if(op == OP_ADD){
        outData[outIndex] = 
            x[unFlatToFlatX(xs1 > 1 ? batchNum : 0, 
                            xs2 > 1 ? gl_GlobalInvocationID.x : 0, 
                            xs3 > 1 ? gl_GlobalInvocationID.y : 0, 
                            xs4 > 1 ? gl_GlobalInvocationID.z : 0)]
            + 
            y[unFlatToFlatY(ys1 > 1 ? batchNum : 0, 
                            ys2 > 1 ? gl_GlobalInvocationID.x : 0, 
                            ys3 > 1 ? gl_GlobalInvocationID.y : 0, 
                            ys4 > 1 ? gl_GlobalInvocationID.z : 0)];
    }else if(op == OP_SUB){
        outData[outIndex] = 
            x[unFlatToFlatX(xs1 > 1 ? batchNum : 0, 
                            xs2 > 1 ? gl_GlobalInvocationID.x : 0, 
                            xs3 > 1 ? gl_GlobalInvocationID.y : 0, 
                            xs4 > 1 ? gl_GlobalInvocationID.z : 0)]
            - 
            y[unFlatToFlatY(ys1 > 1 ? batchNum : 0, 
                            ys2 > 1 ? gl_GlobalInvocationID.x : 0, 
                            ys3 > 1 ? gl_GlobalInvocationID.y : 0, 
                            ys4 > 1 ? gl_GlobalInvocationID.z : 0)];
    }else if(op == OP_DIV){
        outData[outIndex] = 
            x[unFlatToFlatX(xs1 > 1 ? batchNum : 0, 
                            xs2 > 1 ? gl_GlobalInvocationID.x : 0, 
                            xs3 > 1 ? gl_GlobalInvocationID.y : 0, 
                            xs4 > 1 ? gl_GlobalInvocationID.z : 0)]
            / 
            y[unFlatToFlatY(ys1 > 1 ? batchNum : 0, 
                            ys2 > 1 ? gl_GlobalInvocationID.x : 0, 
                            ys3 > 1 ? gl_GlobalInvocationID.y : 0, 
                            ys4 > 1 ? gl_GlobalInvocationID.z : 0)];
    }else if(op == OP_DIV_NO_NAN){
        float denominator = y[unFlatToFlatY(ys1 > 1 ? batchNum : 0, 
                             ys2 > 1 ? gl_GlobalInvocationID.x : 0, 
                             ys3 > 1 ? gl_GlobalInvocationID.y : 0, 
                             ys4 > 1 ? gl_GlobalInvocationID.z : 0)];
        if(denominator == 0){
            outData[outIndex] = 0.0;
        }else{
            outData[outIndex] = 
                x[unFlatToFlatX(xs1 > 1 ? batchNum : 0, 
                                xs2 > 1 ? gl_GlobalInvocationID.x : 0, 
                                xs3 > 1 ? gl_GlobalInvocationID.y : 0, 
                                xs4 > 1 ? gl_GlobalInvocationID.z : 0)]
                / 
                denominator;
        }
    }



}