//#/types, 1
#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_GOOGLE_include_directive : enable

#include "prelude.h"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

#define NHWC 0
#define NCHW 1

layout(set = 0, binding = 0) buffer a {  TYPE_0 A[]; };
layout(set = 0, binding = 1) buffer c {  TYPE_0 outData[]; };

layout(constant_id = 0) const uint localX = 0;
layout(constant_id = 1) const uint subGroupSize = 0;
layout(constant_id = 2) const uint format = NHWC;
layout(constant_id = 3) const uint N = 0;
layout(constant_id = 4) const uint H = 0;
layout(constant_id = 5) const uint W = 0;
layout(constant_id = 6) const uint C = 0;

layout(push_constant) uniform PushConstants {
    uint channelSelect;
} push_const;

shared TYPE_0 sdata[localX / subGroupSize];

void main(){

    uint chunk_size = localX;

    uint base = uint(gl_GlobalInvocationID.x) * chunk_size;

    
    TYPE_0 sum = TYPE_0(0);
    for( uint i = 0; i < chunk_size; i++){
        if(format == NHWC){
            sum += A[((base + i) * C) + push_const.channelSelect];
        }else{
            if(base + i < (W * C))
                sum += A[(base + i) + ((W * C) * push_const.channelSelect)];
        }
    }
    barrier();

    sum = subgroupAdd(sum);
    if (subgroupElect()) sdata[gl_SubgroupID] = sum;
    barrier();

    if (gl_SubgroupID == 0){
        sum = gl_SubgroupInvocationID < gl_NumSubgroups ? sdata[gl_SubgroupInvocationID] : TYPE_0(0);
        sum = subgroupAdd(sum);
        if (subgroupElect()) outData[push_const.channelSelect] = sum;
    }
}