//#/types, 1
#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "prelude.h"

//layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer a { readonly TYPE_0 inData[]; };
layout(set = 0, binding = 1) buffer b { readonly TYPE_0 filters[]; };
layout(set = 0, binding = 2) buffer c {
    readonly int batches;
    readonly int hight, width, channels;
    readonly int filterH, filterW, filterIn, filterOut;
    readonly int strideH, strideW;
    readonly int dilationH, dilationW;
    readonly int resHight, resWidth;
};
layout(set = 0, binding = 3) buffer d { writeonly TYPE_0 outData[]; };
  
// x:batch y:i z:dist
void main(){
    int filterArea = filterH * filterW;
    int filterChannelRaito = int(ceil(float(filterOut) / channels));

    int index = int(gl_GlobalInvocationID.y);
    int dist  = int(gl_GlobalInvocationID.z);
    int waitSelect = ((index * filterChannelRaito) + dist) % filterOut;
    
    int outBatchoffset = int(gl_GlobalInvocationID.x) * (resHight * resWidth * filterOut);
    int inBatchOffset  = int(gl_GlobalInvocationID.x) * (int(gl_NumWorkGroups.y) * filterArea);
    
    #if TYPE_NUM_0 == FLOAT || TYPE_NUM_0 == DOUBLE
        TYPE_0 dotProd = 0.0;
    #elif TYPE_NUM_0 == INT8_T || TYPE_NUM_0 == UINT8_T
        TYPE_0 dotProd = TYPE_0(0);
    #else
        TYPE_0 dotProd = 0;
    #endif

    for(int i = 0; i < filterArea; i++){
        dotProd += inData[inBatchOffset + (index * filterArea) + i] * filters[waitSelect + i * filterOut];
    }

    outData[outBatchoffset + (index * filterChannelRaito) + dist] = dotProd;
}